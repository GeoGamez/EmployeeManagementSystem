package EMS;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;

import java.util.Random;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Calendar;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author P0068839
 */
public class MainJFrame extends javax.swing.JFrame {

    // ATTRIBUTES
    public MyHashTable theHT;

    // CONSTRUCTORS
    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() { //FIX THIS ERROR FILE BREAKS EVERYTHING data loss
        initComponents();

        theHT = new MyHashTable(10);
        System.out.println("HERE HERE");
   
        BufferedReader objReader = null;
        FileReader frEMS;
        try {
            String strCurrentLine;
            frEMS = new FileReader("EMS.txt");
            //Initialing BufferdReasder
            BufferedReader emsread = new BufferedReader(frEMS);
            theHT.clearAll();
            System.out.println("Buffered Reasder start Reading :)");
            while ((strCurrentLine = emsread.readLine()) != null) {
                String fulldata = strCurrentLine;
                if(fulldata.contains(",")){
                String[] employee = fulldata.split(",");
                System.out.println(employee.length);
                if (employee.length == 9 && theHT.checkDupe(Integer.parseInt(employee[0]))) {
                    PTE thePTE = new PTE(Integer.parseInt(employee[0]), employee[1], employee[2],
                            Integer.parseInt(employee[3]), Integer.parseInt(employee[4]), Double.parseDouble(employee[5]), Double.parseDouble(employee[6]), Double.parseDouble(employee[7]), Double.parseDouble(employee[8]));
                    theHT.addEmployee(thePTE);
                    System.out.println("Added new Part Time Employee:  " + employee[0] + " " + employee[1] + " " + employee[2]);
                } else if(employee.length == 7&& theHT.checkDupe(Integer.parseInt(employee[0]))){
                    FTE theFTE = new FTE(Integer.parseInt(employee[0]), employee[1], employee[2], Integer.parseInt(employee[3]), Integer.parseInt(employee[4]), Double.parseDouble(employee[5]), Double.parseDouble((employee[6])));
                    theHT.addEmployee(theFTE);
                    System.out.println("Added new Full Time Employee:  " + employee[0] + " " + employee[1] + " " + employee[2]);
                } else{
                   System.out.println("Format error"); 
                }
                }
            }
            emsread.close();
            System.out.println("Written successfully");
        } catch (IOException except) {
            except.printStackTrace();
        }
    }

    // METHODS   
    public MyHashTable getTheHT() {
        return theHT;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Employee Management System");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jButton1.setText("Create four employees, add to hash table");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Display number of employees");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Add new employee");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pressed_jButton3(evt);
            }
        });

        jButton5.setText("Save all employees to file");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Load all employees from file");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton4.setText("View/Edit/Delete employee");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(72, 245, 66));
        jLabel1.setText("EMPLOYEE MANAGEMENT SYSTEM");

        jLabel2.setText("Created By: Kevin Cheng");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(101, 101, 101))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton5))
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4)
                    .addComponent(jButton6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int year = Calendar.getInstance().get(Calendar.YEAR);
        FTE theFTE;
        PTE thePTE;
        for (int i = 0; i < 4; i++) {

            String stringURL = "https://api.parser.name/";
            String theCountry = "&country_code=DE"; // case of the contry doesn't matter :-)
            String theAppid = "?api_key=2079083be00e24c9c8bbe135f664020b&endpoint=generate"; // My API Key for fakenames
            stringURL += theAppid;
            stringURL += theCountry;

            // Code adapted from that presented in
            // https://www.twilio.com/blog/5-ways-to-make-http-requests-in-java
            URL theUrl = null;
            try {
                theUrl = new URL(stringURL);

            } catch (MalformedURLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

            HttpURLConnection connection = null;
            try {
                connection = (HttpURLConnection) theUrl.openConnection();

            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }


            /*
	String headerField;
	for (int i = 0; i < 100; i++) {
            headerField = connection.getHeaderField(i);
            System.out.println("headerField at " + i + " is " + headerField);
	}
             */
            InputStream responseStream = null;
            try {
                responseStream = connection.getInputStream();

            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

            byte[] theData = new byte[1000]; // Make this byte array comfortably large
            try {
                int numBytesRead = responseStream.read(theData);

                String strData = new String(theData);
                Matcher matcher = Pattern.compile("\"name_ascii\":\"(\\w+)\"").matcher(strData);

                if (!matcher.find()) {
                    System.err.println(strData);
                    return;
                }
                String firstname = matcher.group(1);
                if (!matcher.find()) {
                    System.err.println(strData);
                    return;
                }
                String lastname = matcher.group(1);

                System.out.println(firstname + " " + lastname);

                if (i % 2 == 0) {
                    int EmployeNum = 100000 + (int) (Math.random() * (999999 - 100000) + 1);
                    int BirthYear = (year - 100) + (int) (Math.random() * ((year - 18) - (year - 70)) + 1);
                    int Gender = (int) (Math.random() * (3)) + 1;
                    double DeductRate = Math.round(Math.random() * 100.0) / 100.0;
                    double Salary = Math.round((9000 + (Math.random() * (999999 - 9000) + 1) * 100.0)) / 100.0;
                    if (theHT.checkDupe(EmployeNum)) {
                        theFTE = new FTE(EmployeNum, firstname, lastname, Gender, BirthYear, DeductRate, Salary);
                        theHT.addEmployee(theFTE);
                        System.out.println("Added the FTE to the hash table!");
                    } else {
                        System.out.println("FAILED TO ADD");
                        System.out.println("Error: Dupe Employee numbers");
                    }
                } else {
                    int EmployeNum1 = 100000 + (int) (Math.random() * (999999 - 100000) + 1);
                    int BirthYear1 = (year - 100) + (int) (Math.random() * ((year - 18) - (year - 70)) + 1);
                    int Gender1 = (int) (Math.random() * (2)) + 1;
                    double Salary1 = Math.round((9000 + (Math.random() * (500000 - 9000) + 1) * 100.0)) / 100.0;
                    double HoursPerWeek = 40 + (int) (Math.random() * (20 - 40) + 1);
                    double YearPerWeek = 56 + (int) (Math.random() * (32 - 56) + 1);
                    double HourlyWage = Math.round(((Salary1 / HoursPerWeek) / YearPerWeek) * 100.0) / 100.0;
                    double DeductRate1 = Math.round(Math.random() * 100.0) / 100.0;
                    if (theHT.checkDupe(EmployeNum1)) {
                        thePTE = new PTE(EmployeNum1, firstname, lastname, Gender1, BirthYear1, DeductRate1, HourlyWage, HoursPerWeek, YearPerWeek);
                        theHT.addEmployee(thePTE);
                        System.out.println("Added the PTE to the hash table!");
                    } else {
                        System.out.println("FAILED TO ADD");
                        System.out.println("Error: Dupe Employee numbers");
                    }
                }
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        SeparateJFrame theSeparateJFrame = new SeparateJFrame();
        theSeparateJFrame.setVisible(true);
        //MyHashTable refVal = getTheHT();
        //MyHashTable refVal = theHT;
        theSeparateJFrame.setMainHT(theHT);  // Have theSeparateJFrame mainHT point to the real HT.
    }//GEN-LAST:event_jButton2ActionPerformed

    private void pressed_jButton3(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pressed_jButton3
        // TODO add your handling code here:
        AddNewEmployeeJFrame theANEJFrame = new AddNewEmployeeJFrame();
        theANEJFrame.setVisible(true);
        theANEJFrame.setMainHT(theHT);
    }//GEN-LAST:event_pressed_jButton3

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        //initializing FileWriter
        FileWriter EMS_file;
        try {
            EMS_file = new FileWriter("EMS.txt");

            // Initialing BufferedWriter
            BufferedWriter emswrite = new BufferedWriter(EMS_file);
            System.out.println("Buffered Writer start writing :)");
            for (int i = 0; i < theHT.buckets.length; i++) {
                for (int j = 0; j < theHT.buckets[i].size(); j++) {
                    System.out.println(theHT.writeContents(i, j));
                    emswrite.write(theHT.writeContents(i, j));
                    emswrite.newLine();
                }
            }
            // Use of write() method to write the value in 'ABC' file 
            // Closing BufferWriter to end operation
            emswrite.close();
            System.out.println("Written successfully");
        } catch (IOException except) {
            except.printStackTrace();
        }
        // Here, I need code that walks through the entire hash table
        // and writes the attribute values for each employee to a
        // text file (by using say buffered writer).
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        theHT.clearAll();
        BufferedReader objReader = null;
        FileReader frEMS;
        try {
            String strCurrentLine;
            frEMS = new FileReader("EMS.txt");
            //Initialing BufferdReasder
            BufferedReader emsread = new BufferedReader(frEMS);
            System.out.println("Buffered Reasder start Reading :)");
            while ((strCurrentLine = emsread.readLine()) != null) {
                String fulldata = strCurrentLine;
                String[] employee = fulldata.split(",");
                System.out.println(employee.length);
                if (employee.length == 9) {
                    PTE thePTE = new PTE(Integer.parseInt(employee[0]), employee[1], employee[2],
                            Integer.parseInt(employee[3]), Integer.parseInt(employee[4]), Double.parseDouble(employee[5]), Double.parseDouble(employee[6]), Double.parseDouble(employee[7]), Double.parseDouble(employee[8]));
                    theHT.addEmployee(thePTE);
                    System.out.println("Added new Part Time Employee:  " + employee[0] + " " + employee[1] + " " + employee[2]);
                } else if (employee.length == 7){
                    FTE theFTE = new FTE(Integer.parseInt(employee[0]), employee[1], employee[2], Integer.parseInt(employee[3]), Integer.parseInt(employee[4]), Double.parseDouble(employee[5]), Double.parseDouble((employee[6])));
                    theHT.addEmployee(theFTE);
                    System.out.println("Added new Full Time Employee:  " + employee[0] + " " + employee[1] + " " + employee[2]);
                }else{
                    System.out.println("Format Error");
                }
            }
            emsread.close();
            System.out.println("Read successfully");
        } catch (IOException except) {
            except.printStackTrace();
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        EditDeleteEmployeeJFrame EditEmpJFrame = new EditDeleteEmployeeJFrame();
        EditEmpJFrame.setVisible(true);
        EditEmpJFrame.setMainHT(theHT);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        // TODO add your handling code here:
        //initializing FileWriter
        FileWriter EMS_file;
        try {
            EMS_file = new FileWriter("EMS.txt");

            // Initialing BufferedWriter
            BufferedWriter emswrite = new BufferedWriter(EMS_file);
            System.out.println("Buffered Writer start writing :)");
            for (int i = 0; i < theHT.buckets.length; i++) {
                for (int j = 0; j < theHT.buckets[i].size(); j++) {
                    System.out.println(theHT.writeContents(i, j));
                    emswrite.write(theHT.writeContents(i, j));
                    emswrite.newLine();
                }
            }
            // Use of write() method to write the value in 'ABC' file 
            // Closing BufferWriter to end operation
            emswrite.close();
            System.out.println("Written successfully");
            System.exit(0);
        } catch (IOException except) {
            except.printStackTrace();
        }
        // Here, I need code that walks through the entire hash table
        // and writes the attribute values for each employee to a
        // text file (by using say buffered writer).
    }//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
